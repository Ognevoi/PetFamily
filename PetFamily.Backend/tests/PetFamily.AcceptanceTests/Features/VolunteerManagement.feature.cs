// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PetFamily.AcceptanceTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VolunteerManagementFeature : object, Xunit.IClassFixture<VolunteerManagementFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Volunteer Management", "  As a system administrator\n  I want to manage volunteers\n  So that I can maintai" +
                "n a database of people who help with pet care and adoption", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VolunteerManagement.feature"
#line hidden
        
        public VolunteerManagementFeature(VolunteerManagementFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
#line 7
    await testRunner.GivenAsync("the system is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("the database is clean", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new volunteer")]
        [Xunit.TraitAttribute("FeatureTitle", "Volunteer Management")]
        [Xunit.TraitAttribute("Description", "Create a new volunteer")]
        public async global::System.Threading.Tasks.Task CreateANewVolunteer()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new volunteer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table7.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table7.AddRow(new string[] {
                            "Email",
                            "john.doe@example.com"});
                table7.AddRow(new string[] {
                            "Description",
                            "Experienced pet lover"});
                table7.AddRow(new string[] {
                            "ExperienceYears",
                            "5"});
                table7.AddRow(new string[] {
                            "PhoneNumber",
                            "+1234567890"});
#line 11
    await testRunner.GivenAsync("I have volunteer data with:", ((string)(null)), table7, "Given ");
#line hidden
#line 19
    await testRunner.WhenAsync("I create a volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("the volunteer should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
    await testRunner.AndAsync("the volunteer should have the provided information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.AndAsync("the volunteer should be retrievable by ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a volunteer with social networks")]
        [Xunit.TraitAttribute("FeatureTitle", "Volunteer Management")]
        [Xunit.TraitAttribute("Description", "Create a volunteer with social networks")]
        public async global::System.Threading.Tasks.Task CreateAVolunteerWithSocialNetworks()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a volunteer with social networks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "FirstName",
                            "Jane"});
                table8.AddRow(new string[] {
                            "LastName",
                            "Smith"});
                table8.AddRow(new string[] {
                            "Email",
                            "jane.smith@example.com"});
                table8.AddRow(new string[] {
                            "Description",
                            "Social media savvy"});
                table8.AddRow(new string[] {
                            "ExperienceYears",
                            "3"});
                table8.AddRow(new string[] {
                            "PhoneNumber",
                            "+1987654321"});
#line 25
    await testRunner.GivenAsync("I have volunteer data with:", ((string)(null)), table8, "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Platform",
                            "URL"});
                table9.AddRow(new string[] {
                            "Facebook",
                            "https://facebook.com/jane"});
                table9.AddRow(new string[] {
                            "Twitter",
                            "https://twitter.com/jane"});
#line 33
    await testRunner.AndAsync("I add social networks:", ((string)(null)), table9, "And ");
#line hidden
#line 37
    await testRunner.WhenAsync("I create a volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
    await testRunner.ThenAsync("the volunteer should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
    await testRunner.AndAsync("the volunteer should have the social networks", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a volunteer with assistance details")]
        [Xunit.TraitAttribute("FeatureTitle", "Volunteer Management")]
        [Xunit.TraitAttribute("Description", "Create a volunteer with assistance details")]
        public async global::System.Threading.Tasks.Task CreateAVolunteerWithAssistanceDetails()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a volunteer with assistance details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "FirstName",
                            "Bob"});
                table10.AddRow(new string[] {
                            "LastName",
                            "Johnson"});
                table10.AddRow(new string[] {
                            "Email",
                            "bob.johnson@example.com"});
                table10.AddRow(new string[] {
                            "Description",
                            "Veterinary background"});
                table10.AddRow(new string[] {
                            "ExperienceYears",
                            "10"});
                table10.AddRow(new string[] {
                            "PhoneNumber",
                            "+1555123456"});
#line 42
    await testRunner.GivenAsync("I have volunteer data with:", ((string)(null)), table10, "Given ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Type",
                            "Description"});
                table11.AddRow(new string[] {
                            "Medical Care",
                            "Provide medical assistance"});
                table11.AddRow(new string[] {
                            "Training",
                            "Help with pet training"});
#line 50
    await testRunner.AndAsync("I add assistance details:", ((string)(null)), table11, "And ");
#line hidden
#line 54
    await testRunner.WhenAsync("I create a volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("the volunteer should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the volunteer should have the assistance details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all volunteers")]
        [Xunit.TraitAttribute("FeatureTitle", "Volunteer Management")]
        [Xunit.TraitAttribute("Description", "Get all volunteers")]
        public async global::System.Threading.Tasks.Task GetAllVolunteers()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get all volunteers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 59
    await testRunner.GivenAsync("I have 3 volunteers in the system", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
    await testRunner.WhenAsync("I request all volunteers", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
    await testRunner.ThenAsync("I should receive 3 volunteers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 62
    await testRunner.AndAsync("each volunteer should have basic information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create volunteer with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Volunteer Management")]
        [Xunit.TraitAttribute("Description", "Create volunteer with invalid data")]
        public async global::System.Threading.Tasks.Task CreateVolunteerWithInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create volunteer with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "FirstName",
                            ""});
                table12.AddRow(new string[] {
                            "LastName",
                            ""});
                table12.AddRow(new string[] {
                            "Email",
                            "invalid-email"});
                table12.AddRow(new string[] {
                            "Description",
                            ""});
                table12.AddRow(new string[] {
                            "ExperienceYears",
                            "-1"});
                table12.AddRow(new string[] {
                            "PhoneNumber",
                            "invalid-phone"});
#line 66
    await testRunner.GivenAsync("I have invalid volunteer data:", ((string)(null)), table12, "Given ");
#line hidden
#line 74
    await testRunner.WhenAsync("I create a volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
    await testRunner.ThenAsync("the volunteer request should fail with validation errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
    await testRunner.AndAsync("the volunteer should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await VolunteerManagementFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await VolunteerManagementFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
