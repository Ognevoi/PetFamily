// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PetFamily.AcceptanceTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PetManagementFeature : object, Xunit.IClassFixture<PetManagementFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Pet Management", "  As a volunteer\n  I want to manage pets\n  So that I can maintain detailed inform" +
                "ation about animals in my care", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PetManagement.feature"
#line hidden
        
        public PetManagementFeature(PetManagementFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
#line 7
    await testRunner.GivenAsync("the system is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("the database is clean", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
    await testRunner.AndAsync("I have a volunteer in the system", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("I have species and breeds available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add a pet to a volunteer")]
        [Xunit.TraitAttribute("FeatureTitle", "Pet Management")]
        [Xunit.TraitAttribute("Description", "Add a pet to a volunteer")]
        public async global::System.Threading.Tasks.Task AddAPetToAVolunteer()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add a pet to a volunteer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Name",
                            "Buddy"});
                table1.AddRow(new string[] {
                            "Description",
                            "Friendly dog"});
                table1.AddRow(new string[] {
                            "Color",
                            "Golden"});
                table1.AddRow(new string[] {
                            "HealthInfo",
                            "Healthy"});
                table1.AddRow(new string[] {
                            "Weight",
                            "25.5"});
                table1.AddRow(new string[] {
                            "Height",
                            "60.0"});
                table1.AddRow(new string[] {
                            "IsSterilized",
                            "true"});
                table1.AddRow(new string[] {
                            "IsVaccinated",
                            "true"});
                table1.AddRow(new string[] {
                            "BirthDate",
                            "2020-01-15"});
                table1.AddRow(new string[] {
                            "PetStatus",
                            "LookingForHome"});
#line 13
    await testRunner.GivenAsync("I have pet data with:", ((string)(null)), table1, "Given ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Street",
                            "123 Main St"});
                table2.AddRow(new string[] {
                            "City",
                            "New York"});
                table2.AddRow(new string[] {
                            "State",
                            "NY"});
                table2.AddRow(new string[] {
                            "ZipCode",
                            "10001"});
#line 25
    await testRunner.AndAsync("I have address data:", ((string)(null)), table2, "And ");
#line hidden
#line 30
    await testRunner.WhenAsync("I add the pet to the volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
    await testRunner.ThenAsync("the pet should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
    await testRunner.AndAsync("the pet should be associated with the volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.AndAsync("the pet should have the provided information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add pet with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Pet Management")]
        [Xunit.TraitAttribute("Description", "Add pet with invalid data")]
        public async global::System.Threading.Tasks.Task AddPetWithInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add pet with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Name",
                            ""});
                table3.AddRow(new string[] {
                            "Description",
                            ""});
                table3.AddRow(new string[] {
                            "Color",
                            ""});
                table3.AddRow(new string[] {
                            "HealthInfo",
                            ""});
                table3.AddRow(new string[] {
                            "Weight",
                            "-5.0"});
                table3.AddRow(new string[] {
                            "Height",
                            "-10.0"});
                table3.AddRow(new string[] {
                            "IsSterilized",
                            "true"});
                table3.AddRow(new string[] {
                            "IsVaccinated",
                            "true"});
                table3.AddRow(new string[] {
                            "BirthDate",
                            "2030-01-01"});
                table3.AddRow(new string[] {
                            "PetStatus",
                            "InvalidStatus"});
#line 37
    await testRunner.GivenAsync("I have invalid pet data:", ((string)(null)), table3, "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I add the pet to the volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("the pet request should fail with validation errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync("the pet should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add pet without required species and breed")]
        [Xunit.TraitAttribute("FeatureTitle", "Pet Management")]
        [Xunit.TraitAttribute("Description", "Add pet without required species and breed")]
        public async global::System.Threading.Tasks.Task AddPetWithoutRequiredSpeciesAndBreed()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add pet without required species and breed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Name",
                            "Rex"});
                table4.AddRow(new string[] {
                            "Description",
                            "Good dog"});
                table4.AddRow(new string[] {
                            "Color",
                            "Brown"});
                table4.AddRow(new string[] {
                            "HealthInfo",
                            "Healthy"});
                table4.AddRow(new string[] {
                            "Weight",
                            "30.0"});
                table4.AddRow(new string[] {
                            "Height",
                            "70.0"});
                table4.AddRow(new string[] {
                            "IsSterilized",
                            "true"});
                table4.AddRow(new string[] {
                            "IsVaccinated",
                            "true"});
                table4.AddRow(new string[] {
                            "BirthDate",
                            "2019-05-20"});
                table4.AddRow(new string[] {
                            "PetStatus",
                            "LookingForHome"});
#line 54
    await testRunner.GivenAsync("I have pet data with:", ((string)(null)), table4, "Given ");
#line hidden
#line 66
    await testRunner.ButAsync("no species and breed are selected", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 67
    await testRunner.WhenAsync("I add the pet to the volunteer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
    await testRunner.ThenAsync("the pet request should fail with validation errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 69
    await testRunner.AndAsync("the pet should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await PetManagementFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await PetManagementFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
